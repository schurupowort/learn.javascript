let obj, method;

obj = {
  go: function() { alert(this); }
};

obj.go();               // (1) [object Object]

(obj.go)();             // (2) [object Object]

(method = obj.go)();    // (3) undefined

(obj.go || obj.stop)(); // (4) undefined





// Это обычный вызов метода объекта через точку ., и this ссылается на объект перед точкой.

// Здесь то же самое. Круглые скобки (оператор группировки) тут не изменяют порядок выполнения операций – доступ к методу через точку в любом случае срабатывает первым.

// Здесь мы имеем более сложный вызов (expression).method(). Такой вызов работает, как если бы он был разделён на 2 строчки:

// f = obj.go; // вычисляется выражение (переменная f ссылается на код функции)
// f();        // вызов функции, на которую ссылается f
// Здесь f() выполняется как функция, без передачи значения this.

// Тут похожая ситуация на случай (3) – идёт потеря значения this.